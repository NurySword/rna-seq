
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Jason Walker, jason.walker[AT]wustl.edu
> #Malachi Griffith, mgriffit[AT]wustl.edu
> #Obi Griffith, obigriffith[AT]wustl.edu
> #The Genome McDonnell Institute, Washington University School of Medicine
> 
> #R tutorial for Informatics for RNA-sequence Analysis workshops
> 
> library(ballgown)

Attaching package: ‘ballgown’

The following object is masked from ‘package:base’:

    structure

> library(genefilter)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:ballgown’:

    contains, expr, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(devtools)
Loading required package: usethis
> 
> # Load phenotype data from a file we saved in the current working directory
> pheno_data = read.csv("/home/nury/workspace/rnaseq/de/ballgown/ref_only/NORMAL_vs_TUMOR.csv")
> 
> # Load ballgown data structure and save it to a variable "bg"
> bg = ballgown(samples=as.vector(pheno_data$path), pData=pheno_data)
Wed Jan 19 07:38:31 2022
Wed Jan 19 07:38:31 2022: Reading linking tables
Wed Jan 19 07:38:33 2022: Reading intron data files
Wed Jan 19 07:38:37 2022: Merging intron data
Wed Jan 19 07:38:40 2022: Reading exon data files
Wed Jan 19 07:38:52 2022: Merging exon data
Wed Jan 19 07:38:56 2022: Reading transcript data files
Wed Jan 19 07:39:02 2022: Merging transcript data
Wrapping up the results
Wed Jan 19 07:39:03 2022
> 
> # Display a description of this object
> bg
ballgown instance with 227818 transcripts and 6 samples
> 
> # Load all attributes including gene name
> bg_table = texpr(bg, 'all')
> bg_gene_names = unique(bg_table[, 9:10])
> 
> # Save the ballgown object to a file for later use
> save(bg, file='/home/nury/workspace/rnaseq/de/ballgown/ref_only/bg.rda')
> 
> # Perform differential expression (DE) analysis with no filtering
> results_transcripts = stattest(bg, feature="transcript", covariate="type", getFC=TRUE, meas="FPKM")
> results_genes = stattest(bg, feature="gene", covariate="type", getFC=TRUE, meas="FPKM")
> results_genes = merge(results_genes, bg_gene_names, by.x=c("id"), by.y=c("gene_id"))
> 
> # Save a tab delimited file for both the transcript and gene results
> write.table(results_transcripts, "/home/nury/workspace/rnaseq/de/ballgown/ref_only/NORMAL_vs_TUMOR_transcript_results.tsv", sep="\t", quote=FALSE, row.names = FALSE)
> write.table(results_genes, "/home/nury/workspace/rnaseq/de/ballgown/ref_only/NORMAL_vs_TUMOR_gene_results.tsv", sep="\t", quote=FALSE, row.names = FALSE)
> 
> # Filter low-abundance genes. Here we remove all transcripts with a variance across the samples of less than one
> bg_filt = subset (bg,"rowVars(texpr(bg)) > 1", genomesubset=TRUE)
> 
> # Load all attributes including gene name
> bg_filt_table = texpr(bg_filt , 'all')
> bg_filt_gene_names = unique(bg_filt_table[, 9:10])
> 
> # Perform DE analysis now using the filtered data
> results_transcripts = stattest(bg_filt, feature="transcript", covariate="type", getFC=TRUE, meas="FPKM")
> results_genes = stattest(bg_filt, feature="gene", covariate="type", getFC=TRUE, meas="FPKM")
> results_genes = merge(results_genes, bg_filt_gene_names, by.x=c("id"), by.y=c("gene_id"))
> 
> # Output the filtered list of genes and transcripts and save to tab delimited files
> write.table(results_transcripts, "/home/nury/workspace/rnaseq/de/ballgown/ref_only/NORMAL_vs_TUMOR_transcript_results_filtered.tsv", sep="\t", quote=FALSE, row.names = FALSE)
> write.table(results_genes, "/home/nury/workspace/rnaseq/de/ballgown/ref_only/NORMAL_vs_TUMOR_gene_results_filtered.tsv", sep="\t", quote=FALSE, row.names = FALSE)
> 
> # Identify the significant genes with p-value < 0.05
> sig_transcripts = subset(results_transcripts, results_transcripts$pval<0.05)
> sig_genes = subset(results_genes, results_genes$pval<0.05)
> 
> # Output the signifant gene results to a pair of tab delimited files
> write.table(sig_transcripts, "/home/nury/workspace/rnaseq/de/ballgown/ref_only/NORMAL_vs_TUMOR_transcript_results_sig.tsv", sep="\t", quote=FALSE, row.names = FALSE)
> write.table(sig_genes, "/home/nury/workspace/rnaseq/de/ballgown/ref_only/NORMAL_vs_TUMOR_gene_results_sig.tsv", sep="\t", quote=FALSE, row.names = FALSE)
> 
> # Exit the R session
> quit(save="no")
> proc.time()
   user  system elapsed 
 73.804   1.150  75.307 
