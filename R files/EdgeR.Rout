
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Malachi Griffith, mgriffit[AT]wustl.edu
> #Obi Griffith, obigriffith[AT]wustl.edu
> #The McDonnell Genome Institute, Washington University School of Medicine
> 
> #R tutorial for Informatics for RNA-sequence Analysis workshops
> 
> #######################
> # Loading Data into R #
> #######################
> 
> #Set working directory where output will go
> working_dir = "/home/nury/workspace/rnaseq/de/htseq_counts"
> setwd(working_dir)
> 
> #Read in gene mapping
> mapping=read.table("/home/nury/workspace/rnaseq/de/htseq_counts/ENSG_ID2Name.txt", header=FALSE, stringsAsFactors=FALSE, row.names=1)
> 
> # Read in count matrix
> rawdata=read.table("/home/nury/workspace/rnaseq/expression/htseq_counts/gene_read_counts_table_all_final.tsv", header=TRUE, stringsAsFactors=FALSE, row.names=1)
> 
> # Check dimensions
> dim(rawdata)
[1] 1410    6
> 
> # Require at least 25% of samples to have count > 25
> quant <- apply(rawdata,1,quantile,0.75)
> keep <- which((quant >= 25) == 1)
> rawdata <- rawdata[keep,]
> dim(rawdata)
[1] 351   6
> 
> #################
> # Running edgeR #
> #################
> 
> # load edgeR
> library('edgeR')
Loading required package: limma
> 
> # make class labels
> class <- factor( c( rep("NORMAL",3), rep("TUMOR",3) ))
> 
> # Get common gene names
> genes=rownames(rawdata)
> gene_names=mapping[genes,1]
> 
> 
> # Make DGEList object
> y <- DGEList(counts=rawdata, genes=genes, group=class)
> nrow(y)
[1] 351
> 
> # TMM Normalization
> y <- calcNormFactors(y)
> 
> # Estimate dispersion
> y <- estimateCommonDisp(y, verbose=TRUE)
Disp = 1e-04 , BCV = 0.01 
> y <- estimateTagwiseDisp(y)
> 
> # Differential expression test
> et <- exactTest(y)
> 
> # Print top genes
> # topTags(et)
> topTags(et, n=20, adjust.method="BH", sort.by="PValue")
Comparison of groups:  TUMOR-NORMAL 
                          genes      logFC    logCPM PValue FDR
ENSG00000211669 ENSG00000211669 -13.500017 11.400408      0   0
ENSG00000254709 ENSG00000254709 -12.256442 10.155855      0   0
ENSG00000100368 ENSG00000100368 -11.648914  9.551944      0   0
ENSG00000239713 ENSG00000239713 -11.268461 12.192600      0   0
ENSG00000100065 ENSG00000100065  10.413456 10.689988      0   0
ENSG00000100385 ENSG00000100385 -10.204744 10.622818      0   0
ENSG00000243811 ENSG00000243811 -10.163767  9.816372      0   0
ENSG00000138964 ENSG00000138964  -9.789251 10.706384      0   0
ENSG00000100234 ENSG00000100234   9.424419 13.912049      0   0
ENSG00000138944 ENSG00000138944   8.715983 10.699172      0   0
ENSG00000100196 ENSG00000100196   8.404287 10.015530      0   0
ENSG00000100055 ENSG00000100055  -8.129293 10.511778      0   0
ENSG00000128268 ENSG00000128268  -7.466709 11.167685      0   0
ENSG00000100320 ENSG00000100320   7.290331 13.076232      0   0
ENSG00000128340 ENSG00000128340  -7.186261 12.736438      0   0
ENSG00000100342 ENSG00000100342  -7.166263 10.356783      0   0
ENSG00000159958 ENSG00000159958  -7.030593 11.524131      0   0
ENSG00000185686 ENSG00000185686   6.507261 10.418605      0   0
ENSG00000100167 ENSG00000100167   6.236073 10.393318      0   0
ENSG00000075275 ENSG00000075275   6.121097 11.931566      0   0
> # Print number of up/down significant genes at FDR = 0.05  significance level
> summary(de <- decideTestsDGE(et, p=.05))
       TUMOR-NORMAL
Down            161
NotSig           36
Up              154
> detags <- rownames(y)[as.logical(de)]
> 
> 
> # Output DE genes
> # Matrix of significantly DE genes
> mat <- cbind(
+  genes,gene_names,
+  sprintf('%0.3f',log10(et$table$PValue)),
+  sprintf('%0.3f',et$table$logFC)
+ )[as.logical(de),]
> colnames(mat) <- c("Gene", "Gene_Name", "Log10_Pvalue", "Log_fold_change")
> 
> # Order by log fold change
> o <- order(et$table$logFC[as.logical(de)],decreasing=TRUE)
> mat <- mat[o,]
> 
> # Save table
> write.table(mat, file="DE_genes.txt", quote=FALSE, row.names=FALSE, sep="\t")
> 
> #To exit R type the following
> quit(save="no")
> proc.time()
   user  system elapsed 
  1.025   0.031   1.048 
